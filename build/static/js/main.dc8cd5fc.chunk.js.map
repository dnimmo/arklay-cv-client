{"version":3,"sources":["Application/ApplicationContext.js","components/Button.js","Application/TitleScreen.js","Game/rooms.js","Game/items.js","Game/GameContext.js","utils.js","Game/Directions.js","Game/Inventory.js","Error.js","Game/RoomDescription.js","Game/Game.js","Game/GameIndex.js","Application/Application.js","Application/ApplicationIndex.js","index.js"],"names":["ApplicationContext","createContext","states","initialState","actions","update","state","action","type","ApplicationProvider","children","useReducer","applicationState","dispatch","value","startGame","useCallback","Provider","style","padding","borderRadius","backgroundColor","color","fontSize","cursor","marginBottom","border","display","Button","onClick","text","minHeight","lineHeight","TitleScreen","useContext","isUnlocked","room","itemsUsed","unlockRequirements","every","x","includes","rooms","START","name","intro","surroundings","surroundingsWhenItemPickedUp","surroundingsWhenItemUsed","item","availableDirections","itemsThatCanBeUsed","descriptionWhenExamined","messageOnUnsuccessfulEntryAttempt","TEST","messageOnSuccessfulEntryAttempt","items","TEST_ITEM","description","messageWhenUsed","messageWhenNotUsed","GameContext","currentRoom","inventory","itemsHeld","message","EXAMINE_ITEM","EXAMINE_ROOM","CHANGE_ROOM","SHOW_DIRECTIONS","SHOW_INVENTORY","USE_ITEM","HIDE_INVENTORY","length","payload","itemHasBeenPickedUp","concat","some","itemCanBeUsed","filter","GameProvider","gameState","hideInventory","showInventory","changeRoom","roomKey","attemptToUseItem","itemKey","examineRoom","id","UUID","v4","styles","icon","height","width","minWidth","iconContainer","marginLeft","marginTop","position","direction","directionsContainer","Directions","React","map","key","src","alt","inventoryOuter","top","inventoryContainer","bottom","borderTop","closeButton","right","Inventory","boxShadow","Error","RoomDescription","numberOfItems","opacity","Game","chooseState","GameIndex","Application","ApplicationIndex","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.dc8cd5fc.chunk.js","sourcesContent":["import React, { createContext, useReducer, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nexport \nconst ApplicationContext = \n  createContext();\n\nexport\nconst states = { \n    DISPLAYING_TITLE_SCREEN: 'DISPLAYING_TITLE_SCREEN'\n    , DISPLAYING_GAME: 'DISPLAYING_GAME'\n};\n\n\nconst initialState =\n  states.DISPLAYING_TITLE_SCREEN;\n\n\nconst actions = \n  { START_GAME: 'START_GAME'\n  };\n\n\nconst update = \n  (state, action) => {\n      switch (action.type) {\n      case actions.START_GAME: \n          return states.DISPLAYING_GAME;\n\n      default: \n          return state;\n      }\n  };\n\n\nconst ApplicationProvider = \n  ({ children }) => {\n      const [   \n          applicationState\n          , dispatch\n      ] = \n        useReducer(update, initialState);  \n\n\n      const startGame = useCallback(\n          () => {\n              dispatch({\n                  type: actions.START_GAME,\n              });\n          },\n          // The second argument here is an array of things that the first argument relies on\n          // This is so it knows what to ignore to avoid unnecessary re-renders\n          [dispatch]\n      );\n\n      const value = {  \n          applicationState\n          , startGame\n      };\n\n\n      return (\n          <ApplicationContext.Provider value={value}>\n              {children}\n          </ApplicationContext.Provider>\n      );\n  };\n\nApplicationProvider.propTypes =\n  { children: PropTypes.object.isRequired };\n\n\nexport default ApplicationProvider;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst style = { \n    padding: '10px 20px'\n    , borderRadius: '5px'\n    , backgroundColor: 'darkslategrey'\n    , color: '#fafafa'\n    , fontSize: '16px'\n    , cursor: 'pointer'\n    , marginBottom: '20px'\n    , border: '2px solid'\n    , '&:hover': {\n        display: 'none'\n    }\n};\n\n\nconst Button = \n  ({ onClick, text }) => \n      <button \n          onClick={onClick}\n          style={style}\n      >\n          {text}\n      </button>;\n\n\nButton.propTypes = {\n    onClick: PropTypes.func.isRequired\n    , text: PropTypes.string.isRequired\n};\n\n  \nexport default Button;","import React, { useContext } from 'react';\nimport { ApplicationContext } from './ApplicationContext';\nimport Button from '../components/Button';\n\n\nconst style = {\n    minHeight: '50vh'\n    , padding: '10vw'\n    , lineHeight: '26px'\n};\n\n\nconst TitleScreen = \n  () => {\n      const { startGame } = useContext(ApplicationContext);\n\n\n      return (\n          <div\n              style={style}>\n              <h1>Project Arklay</h1>\n              <p>Your head hurts. You&apos;re not sure where you are, and you definitely don&apos;t know how you got here. There&apos;s rain thrashing the ground all around you. You figure you might as well try and understand what the Hell is going on...</p>\n              <Button \n                  onClick={startGame}\n                  text=\"Start game\"\n              />\n          </div>\n      );\n  };\n\n\nexport default TitleScreen;","export \nconst isUnlocked =\n  ({ room, itemsUsed }) => {\n      const { unlockRequirements } = room;\n\n      const unlockRequirementsMet =\n        !unlockRequirements\n            ? true\n            : unlockRequirements.every(\n                x =>\n                    itemsUsed.includes(x)\n            );\n\n      return unlockRequirementsMet;\n  };\n    \n\nconst rooms = {\n    START: { \n        name: 'Start'\n        , intro: 'It\\'s dark, and cold. You\\'re soaked through. You struggle to remember where you are, let alone how you ended up here. What were you doing again?'\n        , surroundings: 'There\\'s a large door in front of you.'\n        , surroundingsWhenItemPickedUp: null\n        , surroundingsWhenItemUsed: null\n        , item: 'TEST_ITEM'\n        , availableDirections: \n          [ { \n              text: 'Enter'\n              , room: 'TEST'\n              , itemsThatCanBeUsed: ['TEST_ITEM']\n          } \n          ]\n        , descriptionWhenExamined : 'This was where I found the test item'\n        , unlockRequirements: null\n        , messageOnUnsuccessfulEntryAttempt: null\n    }\n    , TEST: {\n        name: 'Test'\n        , intro: 'Now you\\'re inside. Well done!'\n        , surroundings: 'There\\'s a large door behind you.'\n        , surroundingsWhenItemPickedUp: null\n        , surroundingsWhenItemUsed: null\n        , item: null\n        , availableDirections: \n          [ { \n              text: 'Leave'\n              , room: 'START'\n              , itemsThatCanBeUsed: []\n          } \n          ]\n        , descriptionWhenExamined : 'This place is weird.'\n        , unlockRequirements: ['TEST_ITEM']\n        , messageOnSuccessfulEntryAttempt: 'You unlocked the door!'\n        , messageOnUnsuccessfulEntryAttempt: 'The door is locked! Rude.'\n    }\n};\n\n\nexport default rooms;","export\nconst itemCanBeUsed =\n  ({ item, availableDirections }) => \n      availableDirections.some(\n          ({ itemsThatCanBeUsed }) => \n              itemsThatCanBeUsed \n                  ? itemsThatCanBeUsed.includes(item)\n                  : false\n      );\n\n\nexport\nconst itemHasBeenPickedUp =\n  ({ item, inventory }) => \n      inventory.itemsHeld.includes(item)\n        || inventory.itemsUsed.includes(item);\n\n\nconst items = \n  {\n      TEST_ITEM: { \n          name: 'Test item'\n          , description: 'An item Nimmo is using to test items...'\n          , messageWhenUsed: 'You used the thing! :)'\n          , messageWhenNotUsed: 'You didn\\'t use the thing. :('\n      }\n  };\n\n\nexport default items; ","import React, { createContext, useReducer, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport rooms, { isUnlocked } from './rooms';\nimport items, { itemCanBeUsed, itemHasBeenPickedUp } from './items';\n\nexport\nconst GameContext =\n  createContext();\n\n\nexport\nconst states = {\n    DISPLAYING_DIRECTIONS: 'DISPLAYING_DIRECTIONS'\n    , DISPLAYING_INVENTORY: 'DISPLAYING_INVENTORY'\n};\n\n\nconst initialState = {\n    state: states.DISPLAYING_DIRECTIONS\n    , currentRoom: rooms.START\n    , inventory: {\n        itemsHeld: []\n        , itemsUsed: []\n    }\n    , message: null  // This is used to give temporary contextual info to the player\n};\n\n\nconst actions = {\n    EXAMINE_ITEM: 'EXAMINE_ITEM'\n    , EXAMINE_ROOM: 'EXAMINE_ROOM'\n    , CHANGE_ROOM: 'CHANGE_ROOM'\n    , SHOW_DIRECTIONS: 'SHOW_DIRECTIONS'\n    , SHOW_INVENTORY: 'SHOW_INVENTORY'\n    , USE_ITEM: 'USE_ITEM'\n};\n\n\nconst update = \n  (state, action) => {\n      switch (action.type) {\n      case actions.HIDE_INVENTORY:\n          return {\n              ...state\n              , state: states.DISPLAYING_DIRECTIONS\n              , message: null\n          };\n\n\n      case actions.SHOW_INVENTORY: \n          return (\n              state.inventory.itemsHeld.length > 0\n                  ? {\n                      ...state\n                      , state: states.DISPLAYING_INVENTORY\n                      , message: null\n                  }\n                  : {\n                      ...state\n                      , message: 'Your inventory is empty!'\n                  }\n          );\n\n\n      case actions.CHANGE_ROOM:\n          return (\n              isUnlocked({ \n                  room: rooms[action.payload]\n                  , itemsUsed: state.inventory.itemsUsed\n              })\n                  ? {\n                      ...state\n                      , currentRoom: rooms[action.payload]\n                      , message: null\n                  }\n                  : state.inventory.itemsHeld.length > 0 \n                      ? { \n                          ...state\n                          , state: states.DISPLAYING_INVENTORY\n                          , message: rooms[action.payload].messageOnUnsuccessfulEntryAttempt\n                      }\n                      : { \n                          ...state\n                          , message: rooms[action.payload].messageOnUnsuccessfulEntryAttempt\n                      }\n          );\n\n\n\n      case actions.EXAMINE_ROOM: \n          return (\n              !state.currentRoom.item \n                  ? {\n                      ...state\n                      , message: state.currentRoom.descriptionWhenExamined\n                  }\n                  : itemHasBeenPickedUp({ \n                      item: state.currentRoom.item\n                      , inventory: state.inventory\n                  }) \n                      ? {\n                          ...state\n                          , message: \n                              state.currentRoom.descriptionWhenExamined\n                      }\n                      : { ...state\n                          , inventory: \n                              { ...state.inventory\n                                  , itemsHeld: state.inventory.itemsHeld.concat(state.currentRoom.item)\n                              }\n                          , message: \n                            `${items[state.currentRoom.item].name} has been added to your inventory`\n                      }\n            \n          );\n\n      \n      case actions.USE_ITEM:\n          return (\n              itemCanBeUsed({\n                  availableDirections: state.currentRoom.availableDirections\n                  , item: action.payload\n              })\n                  ? {\n                      ...state\n                      , state: states.DISPLAYING_DIRECTIONS\n                      , message: items[action.payload].messageWhenUsed\n                      , inventory: {\n                          itemsHeld: \n                              state\n                                  .inventory\n                                  .itemsHeld\n                                  .filter(x => \n                                      x !== action.payload\n                                  )\n                          , itemsUsed: \n                              state\n                                  .inventory\n                                  .itemsUsed\n                                  .concat(action.payload)\n                      }\n                  }\n                  : {\n                      ...state\n                      , message: items[action.payload].messageWhenNotUsed\n                  }\n          );\n\n\n      default: \n          return state;\n      }\n  };\n\n\nconst GameProvider = \n  ({ children }) => {\n      const [\n          gameState\n          , dispatch\n      ] = \n        useReducer(update, initialState);\n\n\n      const hideInventory =\n        useCallback(\n            () => {\n                dispatch({\n                    type: actions.HIDE_INVENTORY\n                });\n            },\n            [dispatch]\n        );\n      \n\n      const showInventory = \n        useCallback(\n            () => {\n                dispatch({\n                    type: actions.SHOW_INVENTORY\n                });\n            },\n            [dispatch]\n        );\n\n\n      const changeRoom =\n        useCallback(\n            (roomKey) => {\n                dispatch({\n                    type: actions.CHANGE_ROOM,\n                    payload: roomKey\n                });\n            },\n            [dispatch]\n        );\n\n\n      const attemptToUseItem =\n        useCallback(\n            (itemKey) => {\n                dispatch({\n                    type: actions.USE_ITEM,\n                    payload: itemKey\n                });\n            },\n            [dispatch]\n        );\n\n\n      const examineRoom =\n        useCallback(\n            (roomKey) => {\n                dispatch({\n                    type: actions.EXAMINE_ROOM,\n                    payload: roomKey\n                });\n            },\n            [dispatch]\n        );\n\n\n      const value = { \n          gameState\n          , hideInventory\n          , showInventory\n          , changeRoom\n          , attemptToUseItem\n          , examineRoom\n      };\n\n\n      return (\n          <GameContext.Provider \n              value={value}\n          >\n              {children}\n          </GameContext.Provider>\n      );\n  };\n\n\nGameProvider.propTypes = {\n    children: PropTypes.object\n};\n\n\nexport default GameProvider;","import UUID from 'uuid';\n\n\nexport\nconst id = \n  () => UUID.v4();\n\n\nconst utils = \n  { id };\n\n  \nexport default utils;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { GameContext } from './GameContext';\nimport Button from '../components/Button';\nimport { id } from '../utils';\nimport rooms, { isUnlocked } from './rooms';\n\n\nconst styles = {\n    icon : { \n        height: '16px' \n        , width: 'auto'\n        , minWidth: '16px'\n    }\n    , iconContainer: {\n        backgroundColor: '#fafafa'\n        , border: '1px solid #fafafa'\n        , padding: '2px 4px'\n        , borderRadius: '50px'\n        , marginLeft: '-15px'\n        , marginTop: '-8px'\n        , position: 'absolute'\n    }\n    , direction: {\n        minWidth: '280px'\n        , display: 'inline-block'\n    }\n    , directionsContainer: {\n        minHeight: '35vh'\n    }\n};\n\n\nconst Icon =\n  ({ isUnlocked }) => \n      isUnlocked\n          ? <img src=\"./images/unlocked.svg\" alt=\"an unlocked padlock\" style={styles.icon} />\n          : <img src=\"./images/locked.svg\" alt=\"a locked padlock\" style={styles.icon} />;\n\n\nIcon.propTypes = {\n    isUnlocked: PropTypes.bool.isRequired\n};\n\n\nconst Directions = \n  () => {\n      const { \n          gameState\n          , changeRoom\n      } = \n        React.useContext(GameContext);\n\n\n      const { \n          currentRoom\n          , inventory \n      } = \n        gameState;\n  \n        \n      return (\n          <div style={styles.directionsContainer}>\n              { currentRoom\n                  .availableDirections\n                  .map(\n                      ({ text, room }) => \n                          <span \n                              key={id()}\n                              style={styles.direction}\n                          >\n                              <Button \n                                  onClick={() => changeRoom(room)} \n                                  text={text}\n                              />\n                              { !isUnlocked({\n                                  room: rooms[room]\n                                  , itemsUsed: inventory.itemsUsed\n                              }) && <span style={styles.iconContainer}>\n                                  <img src=\"./images/locked.svg\" alt=\"a locked padlock\" style={styles.icon} />\n                              </span> }\n                          </span>\n                  )\n              }\n          </div>\n      );\n  };\n\n\nexport default Directions;","import React from 'react';\nimport { GameContext } from './GameContext';\nimport Button from '../components/Button';\nimport items from './items';\nimport { id } from '../utils';\n\n\nconst styles = {\n    inventoryOuter: {\n        height: '65vh'\n        , position: 'fixed'\n        , top: '0'\n        , width: '100vw'\n        , backgroundColor: 'rgba(0,0,0,0.3)'\n    }\n    , inventoryContainer: {\n        minHeight: '35vh'\n        , position: 'fixed'\n        , bottom: '0'\n        , width: '100vw'\n        , borderTop: '2px solid #fafafa'\n        , padding: '10vh'\n        , backgroundColor: 'slategrey'\n    }\n    , closeButton: {\n        position: 'absolute'\n        , top: '2vh'\n        , right: '2vh'\n    }\n};\n\n\nconst Inventory =\n  () => {\n      const { \n          gameState\n          , attemptToUseItem\n          , hideInventory\n      } \n        = React.useContext(GameContext);\n\n\n      const { \n          inventory\n          , message \n      }\n        = gameState;\n\n\n      return (\n          <div style={styles.inventoryOuter}>\n              <div style={styles.inventoryContainer}>\n                  { inventory.itemsHeld.map(\n                      x => \n                          <Button \n                              onClick={() => attemptToUseItem(x)} \n                              text={items[x].name}\n                              key={id()}\n                          />  \n                  )}\n                  <span style={styles.closeButton}>\n                      <Button \n                          onClick={ hideInventory }\n                          text=\"X\"\n                      />\n                  </span>\n                  { message && <p>{message}</p>\n                  }\n              </div>\n          </div>\n      );\n  };\n\n\nexport default Inventory;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst style = {\n    backgroundColor: 'rgba(255,0,0,0.7)',\n    padding: '20px',\n    color: 'white',\n    borderRadius: '5px',\n    boxShadow: '5px 5px 5px rgba(0,0,0,0.3)'\n};\n\nconst Error = \n  ({ description }) => \n      <div style={style}>\n          <h1>Something has gone wrong</h1>\n          <p>{description}</p>\n      </div>;\n\nError.propTypes = {\n    description: PropTypes.string.isRequired\n};\n\nexport default Error;","import React from 'react';\nimport { GameContext } from './GameContext';\n\n\nconst style = {\n    minHeight: '45vh'\n    , padding: '5vh 20vw'\n};\n\n\nconst RoomDescription =\n  () => {\n      const { \n          gameState\n      } = \n        React.useContext(GameContext);\n\n\n      const {\n          currentRoom\n      } = \n        gameState;\n\n\n      return (\n          <div\n              style={style}\n          >\n              <p>{ currentRoom.intro }</p>\n              <p>{ currentRoom.surroundings }</p>\n          </div>\n      );\n  };\n\n\nexport default RoomDescription;","import React from 'react';\nimport { GameContext, states } from './GameContext';\nimport Directions from './Directions';\nimport Inventory from './Inventory';\nimport Error from '../Error';\nimport Button from '../components/Button';\nimport RoomDescription from './RoomDescription';\n\n\nconst styles = \n  { inventoryButton: \n      numberOfItems => \n          ({ marginLeft: '20px'\n              , opacity: numberOfItems > 0 \n                  ? '1'\n                  : '0.5'\n          })\n  };\n\n\nconst Game = \n  () => { \n      const { \n          gameState\n          , showInventory\n          , examineRoom\n      } = \n        React.useContext(GameContext);\n\n\n      const { \n          state\n          , message\n          , inventory\n          , currentRoom\n      } = \n        gameState;\n\n\n      const chooseState = \n        (state) => {\n            switch (state) {\n            case states.DISPLAYING_DIRECTIONS:\n                return (\n                    <section>\n                        <Directions />\n                        <Button \n                            onClick={() => examineRoom(currentRoom)}\n                            text=\"Examine room\"\n                        />\n                        <span style={styles.inventoryButton(inventory.itemsHeld.length)}>\n                            <Button \n                                onClick={showInventory}\n                                text=\"Inventory\"\n                            />\n                        </span>  \n                    </section>\n                );\n\n\n            case states.DISPLAYING_INVENTORY:\n                return (\n                    <section>\n                        <Directions />\n                        <Inventory />\n                    </section>\n                );\n\n\n            default: \n                return (\n                    <Error \n                        description=\"Game ended up in an unexpected state\" \n                    />\n                );\n            }\n        };\n\n\n      return (\n          <div>\n              <RoomDescription />\n              { chooseState(state) } \n              { message && <p>{message}</p>\n              }\n          </div>\n      );\n  };\n\n\nexport default Game;","import React from 'react';\nimport Game from './Game';\nimport GameProvider from './GameContext';\n\nconst GameIndex = \n  () => \n      <GameProvider>\n          <Game />\n      </GameProvider>;\n\n\nexport default GameIndex;","import React from 'react';\n\nimport { ApplicationContext, states } from './ApplicationContext';\nimport TitleScreen from './TitleScreen';\nimport GameIndex from '../Game/GameIndex';\nimport Error from '../Error';\n\n\nconst Application = \n  () => {\n      const { applicationState } = \n        React.useContext(ApplicationContext);\n\n\n      switch (applicationState) {\n      case states.DISPLAYING_TITLE_SCREEN:\n          return <TitleScreen />;\n\n\n      case states.DISPLAYING_GAME:\n          return <GameIndex />;\n\n\n      default: \n          return (\n              <Error \n                  description={'Application has ended up in an unexpected state'} \n              />\n          );\n\n      }\n  };\n\n\nexport default Application;","import React from 'react';\nimport ApplicationProvider from './ApplicationContext';\nimport Application from './Application';\n\n\nconst style =\n  { minHeight: '100vh'};\n\n\nconst ApplicationIndex = \n  () =>  \n      <ApplicationProvider>\n          <Application \n              style={style}\n          />\n      </ApplicationProvider>;\n\n\nexport default ApplicationIndex;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApplicationIndex from './Application/ApplicationIndex';\n\n\nconst rootElement = document.getElementById('root');\n\n\nReactDOM.render(\n    <ApplicationIndex />\n    , rootElement\n);"],"sourceRoot":""}